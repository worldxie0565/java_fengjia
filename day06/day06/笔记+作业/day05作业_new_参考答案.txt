1.分析以下需求，并用代码实现：
	(1)定义一个int类型的二维数组
	(2)获取该二维数组最小元素，并输出
		答：参考答案
			public class Test01 {
				public static void main(String[] args) {
					//1.定义int类型的二维数组
					int[][] arr = {{10,20,30},{3,2,1},{4,5,6},{100,200,300}};
					//2.假设该int类型的二维数组中的第一个元素arr[0][0]是最小的
					int min = arr[0][0];
					//3.遍历二维数组中的每个一维数组
					for(int i=0;i<arr.length;i++) {
						//4.遍历当前一维数组中的每个元素，只要比min小，就将当前元素赋值给min
						for(int j=0;j<arr[i].length;j++) {
							if(min>arr[i][j]) {
								min = arr[i][j];
							}
						}
					}
					//4.打印最小值
					System.out.println("min="+min);
				}
			}
			
2.分析以下需求，并用代码实现：
	(1)定义一个int类型的一维数组，内容为{6,2,9,15,1,5,20,7,18}
	(2)将数组最大元素与最后一位元素进行交换,最小元素与第一位元素进行交换，并打印数组
	答：参考答案
		public class Test02 {
			public static void main(String[] args) {
				int[] arr = {6,2,9,15,1,5,20,7,18};
				int maxIndex = getMaxOrMinIndex(arr, true); // 获取最大值索引
				int minIndex = getMaxOrMinIndex(arr, false); // 获取最小值索引
				printArr(arr, maxIndex, minIndex); // 交换并打印
			}
			//定义交换数组最大元素与最后一位元素进行交换,最小元素与第一位元素进行交换，并打印数组
			public static void printArr(int[] arr, int maxIndex, int minIndex) {
				/*
				//数组最大元素与最后一位元素进行交换
				int temp = arr[maxIndex]; 
				arr[maxIndex] = arr[arr.length - 1];
				arr[arr.length - 1] = temp;
				//最小元素与第一位元素进行交换
				temp = arr[0]; // 交换最小元素
				arr[0] = arr[minIndex];
				arr[minIndex] = temp;
				*/
				//数组最大元素与最后一位元素进行交换
				swap(arr,maxIndex,arr.length-1);
				swap(arr,minIndex,0);
				for (int i : arr) { // 遍历数组输出
					System.out.print(i + " ");
				}
			}
			//定义交换数组指定位置的元素的方法
			public static void swap(int[] arr,int i,int j) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			//定义方法获取数组中的最大值或者最小值对应的索引，flag为"true"表示求最大值的索引，flag为false表示求最小值的索引
			//可以将获取最大值索引和最小值索引的方法写成下面的方法，但是建议分开写
			public static int getMaxOrMinIndex(int[] arr, boolean flag) {
				// 假设数组的第一个元素为最值
				int index = 0; 
				for (int i = 0; i < arr.length; i++) { // 遍历数组
					if (flag) { // 最大值
						if (arr[index] < arr[i]) {
							index = i;
						}
					} else {
						if (arr[index] > arr[i]) { // 最小值
							index = i;
						}
					}
				}
				return index; // 返回最值索引
			}

		}
		
		public class Test02_2 {
			public static void main(String[] args) {
				int[] arr = {6,2,9,15,1,5,20,7,18};
				printArr(arr); // 交换并打印
			}
			//定义交换数组最大元素与最后一位元素进行交换,最小元素与第一位元素进行交换，并打印数组
			//注意：方法可以嵌套调用但是不能嵌套定义
			public static void printArr(int[] arr) {
				//数组最大元素与最后一位元素进行交换
				int maxIndex = getMaxIndex(arr);
				int minIndex = getMinIndex(arr);
				swap(arr,maxIndex,arr.length-1);
				swap(arr,minIndex,0);
				for (int i : arr) { // 遍历数组输出
					System.out.print(i + " ");
				}
			}
			//定义交换数组指定位置的元素的方法
			public static void swap(int[] arr,int i,int j) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			//定义方法获取数组最大值对应的索引位置
			public static int getMaxIndex(int[] arr) {
				// 假设数组的第一个元素为最大值
				int index = 0; 
				for (int i = 0; i < arr.length; i++) { // 遍历数组
					if (arr[index] < arr[i]) {
						index = i;
					}
				}
				return index; // 返回最值索引
			}
			//定义方法获取数组最小值对应的索引位置
			public static int getMinIndex(int[] arr) {
				// 假设数组的第一个元素为最小值
				int index = 0; 
				for (int i = 0; i < arr.length; i++) { // 遍历数组
					if (arr[index] > arr[i]) {
						index = i;
					}
				}
				return index; // 返回最值索引
			}
		}

3.分析以下需求，并用代码实现：
	(1)键盘录入6个int类型的数据存数数组arr中
	(2)将arr数组中的内容反转
	(3)将翻转后的数组角标为奇数的互相交换 1和3换, 3和5换,以此类推
	(4)最后将数组最后一个角标为奇数的元素 和数组中第一个角标为奇数的元素交换
	(5)打印最终的数组(实现了1-4步之后的数组)
	(6)如：用户输入的6个int数字为[1,2,3,4,5,6],最后输出的结果为[6, 5, 4, 1, 2, 3]
		答：参考答案
			public class Test04 {
				public static void main(String[] args) {
					//1.通过键盘录入获取数组
					int[] arr = getArrayByKeyBoard();
					//2.按照要求给数组加密
					getSecurityArray(arr);
					//3.打印数组内容
					print(arr);		
				}	
				//1.通过键盘录入6个int类型的数字并存入数组中
				public static int[] getArrayByKeyBoard() {
					int[] arr = new int[6];
					Scanner sc = new Scanner(System.in);
					System.out.println("请依次输入6个整数：");
					for(int i=0;i<arr.length;i++) {
						arr[i] = sc.nextInt();
					}
					return arr;
				}
				//2.数组反转
				public static void reverseArray(int[] arr) {
					int startIndex = 0;//最开始的索引
					int endIndex = arr.length-1;//最后的索引	
					
					for(;startIndex<=endIndex;startIndex++,endIndex--) {			
						swap(arr,startIndex,endIndex);
					}		
				}	
				//3.交换arr数组中角标为startIndex和endIndex的元素
				private static void swap(int[] arr, int startIndex, int endIndex) {
					int temp = arr[startIndex];
					arr[startIndex] = arr[endIndex];
					arr[endIndex] = temp;
				}
				//4.数组的反转 反转后的数组 角标为奇数的互相换 1 和3换 3和 5换以此类推 
				public static void reverseArrayByIndex(int[] arr){
					//i=1,j=3;i=3,j=5;i=5,j=7
					for(int i=1,j=i+2;i<arr.length&&j<arr.length;i+=2,j+=2) {
						swap(arr,i,j);
					}
					
				}
				//5.然后数组最后一个角标为奇数的元素 和数组中第一个角标为奇数的元素交换
				private static void swap(int[] arr){
					//数组中的最后一个为奇数的角标
					int lastIndex = (arr.length-1)%2==0?arr.length-2:arr.length-1;
					swap(arr,1,lastIndex);
				}
				//6.打印数组，如果长度为0，打印[],如果数组为null,打印null，否则打印格式如：[1, 2, 3, 4, 5, 6]
				public static void print(int[] arr){
					//如果数组为null,打印null
					if(arr==null) {
						System.out.println("null");
						return;
					}
					//如果长度为0，打印[]
					if(0==arr.length) {
						System.out.println("[]");
						return;
					}
					System.out.print("[");
					for(int i =0;i<arr.length;i++) {				
						System.out.print(arr[i]);
						if(i!=arr.length-1)
							System.out.print(", ");
					}
					System.out.println("]");
				}
				//7.直接获取加密后的数组
				public static void getSecurityArray(int[] arr) {
					//1.数组反转
					reverseArray(arr);
					//2.将翻转后的数组角标为奇数的互相交换 1和3换, 3和5换,以此类推
					reverseArrayByIndex(arr);
					//3.然后数组最后一个角标为奇数的元素 和数组中第一个角标为奇数的元素交换
					swap(arr);
				}
			}

4.把今天讲过的其他案例再练习一遍

	